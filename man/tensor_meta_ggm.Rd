% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/torch_magna.R
\name{tensor_meta_ggm}
\alias{tensor_meta_ggm}
\title{Random effects MAGNA with a Torch backend}
\usage{
tensor_meta_ggm(
  corMats = NULL,
  nobs = NULL,
  Vmethod = NULL,
  Vestimation = NULL,
  missing = FALSE,
  params_free_filter = NULL,
  params_value_filter = NULL,
  dtype = torch_float32(),
  device = torch_device("cpu")
)
}
\arguments{
\item{corMats}{list containing correlation matrices of the studies of the model}

\item{nobs}{vector containing the sample sizes of the studies of the model}

\item{Vmethod}{specification for treatment of V matrix, either "individual" or "pooled"}

\item{Vestimation}{specification for estimation of V matrix, either "per_study" or "averaged"}

\item{missing}{(optional) indicator for whether missing values are present in the correlation matrices}

\item{params_free_filter}{(optional) torch_tensor of booleans (1s/0s) indicating which omega parameters are free or constrained}

\item{params_value_filter}{(optional) user-defined torch_tensor of values indicating the starting values of the omega parameters to be used for optimization}

\item{dtype}{(optional) torch dtype for the model (default torch_float32())}

\item{device}{(optional) device type to put the model on. (default torch_device("cpu")) see [torch::torch_device()]}
}
\value{
A `torch_random_effects_MAGNA` object, which is an `nn_module` (torch object)
}
\description{
Function for creating a random effects MAGNA model
}
\details{
This function instantiates a torch object for the estimation of omega parameters and tau parameters
in a random effects MAGNA model. Through `torch`, gradients of this forward model can then
be computed using backpropagation, and the parameters can be optimized using gradient-based
optimization routines from the `torch` package.
}
\section{Methods}{


## `$initialize(corMats,...)`

The initialize method. Don't use this, just use [tensor_lnm()]

### Arguments
- `corMats` list containing correlation matrices of the studies of the model
- `nobs` vector containing the sample sizes of the studies of the model
- `Vmethod` specification for treatment of V matrix, either "individual" or "pooled"
- `Vestimation` specification for estimation of V matrix, either "per_study" or "averaged"
- `missing` (optional) indicator for whether missing values are present in the correlation matrices
- `params_free_filter` (optional) torch_tensor of booleans (1s/0s) indicating which omega parameters are free or constrained 
- `params_value_filter` (optional) user-defined torch_tensor of values indicating the starting values of the omega parameters to be used for optimization 
- `dtype` (optional) torch dtype for the model (default torch_float32())
- `device` (optional) device type to put the model on. (default torch_device("cpu")) see [torch::torch_device()]

### Value
A `torch_random_effects_MAGNA` object, which is an `nn_module` (torch object)



## `$get_V_i_or_V_asterisk()`

Compute either V_i or V_asterisk used in random effects MAGNA

### Value
Either a torch tensor (V matrix) or a list of torch tensors (V matrices)



## `$get_loss()`
Get the value of the fit function.  The fit function has 2 forms corresponding to when  
a single V matrix is used and when multiple V matrices for each individual study are used


### Value
Value of fit function (torch scalar)



## `$fit()`
Fit a torch_random_effects_MAGNA model using the appropriate fit function.
This function uses the Adam optimizer to estimate the omega and tau parameters.
Note that very often, the inverse Hessian obtained after optimization is not positive definite
and this is often due to premature convergence during numerical optimization. 
To combat this, try running "fit()" again with a different learning rate 
if necessary to obtain estimates closer to the argmin of the fit function.

### Arguments
- `lrate` (Optional) learning rate of the Adam optimizer. Default is 0.05.
- `maxit` (Optional) maximum number of epochs to train the model. Default is 5000.
- `verbose` (Optional) whether to print progress to the console.  Default is TRUE.
- `tol` (Optional) parameter change tolerance for stopping training. Default is 1e-20.

### Value
Self, i.e., the `torch_random_effects_MAGNA` object with updated parameters



## `$inverse_Hessian()`
Compute and return the asymptotic covariance matrix of the parameters with
respect to the appropriate fit function in random effects MAGNA


### Value
A `torch_tensor`, representing the ACOV of the free parameters



## `$get_all_pairings()`
Get all the possible combinations of pairs of a specified set of variables. 
For example, if there are 3 variables varaibles = (a,b,c), we have a total of 3 choose 2, or 3
pairs possible and the function get_all_pairings(variables) will return c('a~b', 'a~c', 'b~c').

### Arguments
- `variables` (Optional) Set of variables to get the pairings from

### Value
vector of all possible combinations of pairs



## `$get_summary(epsilon)`
Get all the free omega parameters and if needed, tau parameters 
determined after model fit. Standard errors and p-values are also provided.

### Arguments
- `omega_params_only` (Optional) Indicate only whether to return omega parameters,
by default only omega parameters will be returned

### Value
Dataframe of parameters, standard errors, p-values , and asterisks to indicate significant at
alpha = 0.05
}

